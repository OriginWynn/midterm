# -*- coding: utf-8 -*-
"""newmidterm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zhgB12PNpmnb7Fv8dliQc9nITw8WG91e
"""

pip install tensorflow_addons

from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras import layers
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical
import numpy as np
import os
import cv2
from google.colab.patches import cv2_imshow
from IPython.display import Image
import matplotlib.pyplot as plt
from tensorflow.keras.optimizers import Adam
import keras
import tensorflow_addons as tfa
import tensorflow as tf

if not os.path.exists('with_mask'):
  os.makedirs('with_mask')
else:
  print('with_mask/ already exit')
if not os.path.exists('without_mask'):
  os.makedirs('without_mask')
else:
  print('without_mask/ already exit')
if not os.path.exists('new'):
  os.makedirs('new')
else:
  print('new/ already exit')

# 預先訓練好的模型 -- VGG16, 不含後三層(辨識層)
base_model = VGG16(weights='imagenet', include_top=False)

# 連接自訂層
x = base_model.output
#x = layers.Flatten()(x)
x = layers.GlobalAveragePooling2D()(x)
#x = layers.Dropout(0.2)(x)
x = layers.Dense(256, activation='relu')(x)
#x = layers.Dropout(0.2)(x)
x = layers.Dense(64, activation='relu')(x)
x = layers.Dense(2, activation='sigmoid')(x)

# 設定新模型的 inputs/outputs
model = Model(inputs=base_model.input, outputs=x)

# VGG16 原有的層均不重新訓練
for layer in base_model.layers:
    layer.trainable = False
    
model.compile(loss='categorical_crossentropy',
       optimizer=Adam(),
       metrics=['Accuracy',
       keras.metrics.Recall(name='Recall'),
       tfa.metrics.F1Score(num_classes=2,name='F1_score',average='macro'),
       tf.keras.metrics.Precision(thresholds=None, top_k=None, class_id=None, name=None, dtype=None)])

img_path = 'with_mask/'
image_files = np.array([img_path+f for f in os.listdir(img_path) if os.path.isfile(img_path+f) and f[-3:] == 'jpg'])

# 讀取 data/without_mask 目錄下所有圖片檔名
img_path = 'without_mask/'
image_files2 = np.array([img_path+f for f in os.listdir(img_path) if os.path.isfile(img_path+f) and f[-3:] == 'jpg'])

print(len(image_files))
print(len(image_files2))

X = np.array([])
# 讀取 data/without_mask 目錄下所有圖檔
for f in image_files2:
    # 載入圖檔，並縮放寬高為 (224, 224) 
    img = image.load_img(f, target_size=(224, 224))
    # 加一維，變成 (1, 224, 224, 3)，最後一維是色彩
    img2 = image.img_to_array(img)
    img2 = np.expand_dims(img2, axis=0)
    if len(X.shape) == 1:
        X = img2
    else:
        X = np.concatenate((X, img2), axis=0)
        
# 讀取 data/with_mask 目錄下所有圖檔
for f in image_files:
    # 載入圖檔，並縮放寬高為 (224, 224) 
    img = image.load_img(f, target_size=(224, 224))
    # 加一維，變成 (1, 224, 224, 3)，最後一維是色彩
    img2 = image.img_to_array(img)
    img2 = np.expand_dims(img2, axis=0)
    if len(X.shape) == 1:
        X = img2
    else:
        X = np.concatenate((X, img2), axis=0)

X = preprocess_input(X)

y = np.concatenate((np.zeros(image_files2.shape[0]), np.ones(image_files.shape[0])))
# one-hot encoding
y = to_categorical(y, num_classes=2)

train_history = model.fit(X, y, epochs=4, validation_split=0.2, verbose=2)

########## 圖片測試
img_path = 'new/'
files=os.listdir(img_path)
X = np.array([])
test = np.array([img_path+f for f in os.listdir(img_path) if os.path.isfile(img_path+f) and f[-3:] == 'jpg'])
prob=[]
img_display=[]
for count in range(0,len(files)):
  img_display.append(cv2.imread(img_path+files[count]))#讀圖片
#print(files)
#cv2_imshow(test[0])
for f in test:
  # 載入圖檔，並縮放寬高為 (224, 224) 
  img = image.load_img(f, target_size=(224, 224))
# 加一維，變成 (1, 224, 224, 3)，最後一維是色彩
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  x = preprocess_input(x)
  #cv2_imshow(image_files3[count])
  prob.append(round(model.predict(x)[0][1] * 100, 2))
  #print(f'戴口罩機率：{round(model.predict(x)[0][1] * 100, 2):.2f}')
for i in range(len(test)):
  img_display[i] = cv2.resize(img_display[i], (224,224))
  cv2_imshow(img_display[i])
  print(files[i])
  print(f'戴口罩機率：{prob[i]:.2f}%')
#Image(test[0], width=200)
#cv2_imshow(img_display[1])
#img = cv2.resize(img, (150, 150))

#刪除colab資料
try:
    os.remove('new/4.jpg')
except OSError as e:
    print(f"Error:{ e.strerror}")